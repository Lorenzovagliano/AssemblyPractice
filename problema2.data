.data
vetor: .word 15 15 10
scale_factor: .word 3  # This represents the fixed-point number 1.5
threshold: .word 20   # Define the threshold value here

.text
la t0, vetor        # Load the address of the vetor array into t0
add t1, x0, x0      # Initialize loop counter t1
addi t2, t1, 3      # Set t2 as the loop exit condition (number of elements in the array)
add t6, x0, x0      # Initialize a counter for elements greater than the threshold

L3:
    lw t4, 0(t0)    # Load the current element into t4
    lw t5, scale_factor  # Load the scale factor (1.5) into t5
    
    mul t4, t4, t5  # Multiply the element by the scale factor (fixed-point multiplication)
    
    lw s0, threshold  # Load the threshold value into s0 (use s registers for temporary storage)
    bgt t4, s0, greater_than_threshold  # Check if the result is greater than the threshold
    
    j not_greater_than_threshold
    
greater_than_threshold:
    addi t6, t6, 1  # Increment the counter for elements greater than the threshold
    
not_greater_than_threshold:
    sw t4, 0(t0)    # Store the result back into the array
    
    addi t0, t0, 4  # Move to the next element in the vetor array
    addi t1, t1, 1  # Increment the loop counter
    
    bne t1, t2, L3  # Check if we've reached the end of the array, if not, continue the loop

# The modified vetor array now contains the elements multiplied by 1.5
# The counter in t6 contains the number of elements greater than the threshold

# Loop a number of times equal to the counter in t6
add s1, x0, x0      # Initialize loop counter t7
L4:
    beq s1, t6, loop_done  # Check if we've completed looping t6 times
    # Your loop body here
    
    addi s1, s1, 1  # Increment the loop counter
    j L4

loop_done:
# The loop has completed t6 times
